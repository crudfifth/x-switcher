(()=>{"use strict";console.log("[DEBUG] Background script loaded"),chrome.runtime?.onInstalled?.addListener((()=>{console.log("[DEBUG] 拡張機能がインストールまたは更新されました。")})),chrome.runtime?.onMessage?.addListener(((o,e,t)=>{if(console.log("[DEBUG] 受信メッセージ:",o),"load_session"===o.action)return async function(o){const e=(await chrome.storage.local.get(["accounts"])).accounts??[];if(o<0||o>=e.length)return void console.warn("[WARN] 無効なインデックス:",o);const t=e[o];console.log(`[DEBUG] セッションを復元: ${t.name}`);for(const o of t.cookies)await chrome.cookies.set({url:"https://x.com",name:o.name,value:o.value,domain:o.domain,path:o.path,secure:o.secure,httpOnly:o.httpOnly,sameSite:o.sameSite,expirationDate:o.expirationDate});console.log("[DEBUG] クッキーの復元完了");const n=await chrome.tabs.query({url:"*://x.com/*"});for(const o of n)void 0!==o.id&&(await chrome.tabs.reload(o.id),console.log(`[DEBUG] タブをリロード: tabId=${o.id}`))}(o.index).then((()=>{t({status:"ok"})})).catch((o=>{console.error("[ERROR] セッションの復元に失敗:",o);const e=o instanceof Error?o.message:String(o);t({status:"error",message:e})})),!0})),chrome.webNavigation?.onCompleted?.addListener((async o=>{if(!o.url?.includes("x.com"))return;console.log("[DEBUG] Xにアクセス検知、自動取得開始...");const e=await(chrome.cookies?.getAll({domain:".x.com"}))??[];if(0===e.length)return void console.warn("[WARN] 取得できるクッキーがありませんでした。");const t=e.find((o=>"twid"===o.name));if(!t)return void console.warn("[WARN] `twid` クッキーが見つかりませんでした。");const n=decodeURIComponent(t.value).replace(/^u=/,"");console.log(`[DEBUG] 取得したアカウント ID: ${n}`);const a=(await chrome.storage.local.get(["accounts"])).accounts??[];a.some((o=>o.name===n))?console.log(`[DEBUG] すでに保存済みのアカウント (${n}) のためスキップ`):(a.push({name:n,twid:n,cookies:e}),await chrome.storage.local.set({accounts:a}),console.log(`[DEBUG] Xのアカウント情報を ${n} として自動保存しました`))}))})();